// Injecting the countdown into the HTML document
const countdownContainer = document.querySelector(".countdown-container");

// Create and inject the SVG and countdown display
countdownContainer.innerHTML = `
    <svg id="progress-wrapper" width="500" height="500" viewBox="0 0 500 500">
      <circle cx="250" cy="250" r="200" stroke="#c39fe0" stroke-width="25" fill="transparent" id="progress" />
    </svg>
    <span class="seconds" id="seconds"></span>
`;
countdownContainer.style.position = "relative";

// Setting up styles for the countdown display
const timeSpan = document.getElementById("seconds");
Object.assign(timeSpan.style, {
  position: "absolute",
  color: "#e8deee",
  fontWeight: "900",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
});

// Getting references to the progress elements
const progressWrapper = document.getElementById("progress-wrapper");
const progress = document.getElementById("progress");

// Countdown options from data attributes
const options = {
  duration: +countdownContainer.dataset.duration,
  transition: countdownContainer.dataset.transition,
  color: countdownContainer.dataset.color,
  size: +countdownContainer.dataset.size,
  initialPosition: countdownContainer.dataset.position,
};

// Main function to initialize and start the circular countdown
const circularCountdown = ({ duration, transition, color, size, initialPosition }) => {
  renderSeconds(duration);
  adjustFontSize(size);
  adjustCircleSize(size);
  setInitialPosition(initialPosition);
  animationStart(color, transition, duration);
};

// Function to render the seconds countdown
const renderSeconds = (duration) => {
  timeSpan.innerHTML = duration;
  const secondsCountdown = setInterval(() => {
    if (duration <= 0) {
      clearInterval(secondsCountdown);
      timeSpan.innerHTML = `<i class="fa-solid fa-check"></i>`;
      return;
    }
    timeSpan.innerHTML = --duration;
  }, 1000);
};

// Function to adjust font size based on the countdown size
const adjustFontSize = (size) => {
  timeSpan.style.fontSize = `${size / 5}px`;
};

// Function to adjust the SVG circle size
const adjustCircleSize = (size) => {
  Object.assign(progressWrapper.style, {
    width: `${size}px`,
    height: `${size}px`,
  });
};

// Function to set the initial position of the countdown
const setInitialPosition = (initialPosition) => {
  const rotations = {
    up: "270deg",
    left: "180deg",
    down: "90deg",
  };
  progressWrapper.style.transform = `rotate(${rotations[initialPosition] || "0deg"})`;
};

// Function to start the animation of the progress circle
const animationStart = (color, transition, duration) => {
  const length = progress.getTotalLength();
  progress.style.stroke = color;
  progressWrapper.style.strokeDasharray = length;
  progressWrapper.style.animation = `progress ${transition} ${duration}s forwards`;
};

// Initialize countdown on page load
const init = () => {
  circularCountdown(options);
};

// Function to reset the countdown
const resetCountdown = () => {
  progress.style.animation = "none"; // Reset the animation
  progressWrapper.style.strokeDasharray = 0; // Clear the stroke
  progressWrapper.style.animation = "none"; // Clear the animation
  progress.offsetHeight; // Trigger reflow
  init(); // Reinitialize the countdown
};

// Uncomment to start countdown on page load
// init();
